rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }

    function isRequestParticipant(data) {
      return isAuthenticated() && 
        (request.auth.uid == data.senderId || 
         request.auth.uid == data.receiverId);
    }

    // User collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Swap requests collection rules
    match /swapRequests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
      allow delete: if false;
    }

    // Chat collection rules
    match /chats/{chatId} {
      // Allow reading chats where user is a participant
      allow read: if isAuthenticated() && 
        resource.data.participants.hasAny([request.auth.uid]);

      // Allow creating new chats
      allow create: if isAuthenticated() && 
        request.resource.data.participants.hasAll([request.auth.uid]) && 
        request.resource.data.participants.size() == 2;

      // Allow updating chat metadata (like lastMessage and unreadCounts)
      allow update: if isAuthenticated() && 
        resource.data.participants.hasAny([request.auth.uid]);

      // Rules for messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) && 
          request.resource.data.senderId == request.auth.uid;
        
        allow update: if isAuthenticated() && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
          (request.resource.data.senderId == request.auth.uid || 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']));
      }
    }

    // Skills collection rules
    match /skills/{skillId} {
      allow read: if true; // Allow anyone to read skills
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow delete: if false;
    }

    // Skill categories collection (if you have one)
    match /skillCategories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if false;  // Only admins can modify categories through admin panel
    }
  }
}
